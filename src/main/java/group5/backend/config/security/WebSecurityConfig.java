package group5.backend.config.security;

import com.fasterxml.jackson.databind.ObjectMapper;
import group5.backend.response.ApiResponse;
import jakarta.servlet.http.Cookie;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.InsufficientAuthenticationException;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import jakarta.servlet.http.HttpServletResponse;


/**
 * @EnableWebSecurity: @PreAuthorize, @Secured Í∞ôÏùÄ Î©îÏÑúÎìú ÏàòÏ§ÄÏùò Í∂åÌïú Ï≤¥ÌÅ¨ Ïï†ÎÖ∏ÌÖåÏù¥ÏÖòÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÍ≤å ÌôúÏÑ±Ìôî
 * @PreAuthorize: Î©îÏÑúÎìú Ïã§Ìñâ Ï†ÑÏóê SpEL ÌëúÌòÑÏãùÏùÑ Ïù¥Ïö©Ìï¥ Í∂åÌïúÏùÑ Í≤ÄÏÇ¨ÌïòÎäî Ïï†ÎÖ∏ÌÖåÏù¥ÏÖò
 * ex) @PreAuthorize("hasRole('MERCHANT')")
 * @Secured: ÏßÄÏ†ïÌïú Ïó≠Ìï†(Ïòà: ROLE_ADMIN)Ïù¥ ÏûàÏñ¥Ïïº Î©îÏÑúÎìúÎ•º Ïã§ÌñâÌï† Ïàò ÏûàÎèÑÎ°ù Ï†úÌïúÌïòÎäî Ïï†ÎÖ∏ÌÖåÏù¥ÏÖò
 * ex) @Secured("ROLE_MERCHANT")
 * */
@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class WebSecurityConfig {

    private final UserDetailsServiceImpl userDetailService;
    private final CustomAuthenticationEntryPoint customAuthenticationEntryPoint;
    private final CustomAccessDeniedHandler customAccessDeniedHandler;


    // Ï†ïÏ†Å Î¶¨ÏÜåÏä§ Î≥¥Ïïà Ï†úÏô∏
    @Bean
    public WebSecurityCustomizer webSecurityCustomizer() {
        return (web) -> web.ignoring()
                .requestMatchers("/static/**");
    }

    // Î≥¥Ïïà ÌïÑÌÑ∞ Ï≤¥Ïù∏ ÏÑ§Ï†ï
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        return http
                .csrf(csrf -> csrf.disable()) // REST APIÏóêÏÑúÎäî CSRF ÎπÑÌôúÏÑ±Ìôî
                .exceptionHandling(ex -> ex
                        .authenticationEntryPoint(customAuthenticationEntryPoint)
                        .accessDeniedHandler(customAccessDeniedHandler)
                )
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers(
                                "/v3/api-docs/**",
                                "/v3/api-docs/swagger-config",
                                "/swagger-ui/**",
                                "/swagger-ui.html"
                        ).permitAll()
                        .requestMatchers("/api/signup", "/api/login").permitAll()
                        .requestMatchers("/api/users/**").hasAuthority("USER")
                        .requestMatchers("/api/merchants/**").hasAuthority("MERCHANT")
                        .requestMatchers("/api/**").permitAll()
                        .requestMatchers("/images/**").permitAll()  // Ïù¥ÎØ∏ÏßÄ Î¶¨ÏÜåÏä§Ïóê ÎåÄÌïú Ï†ëÍ∑ºÏùÑ Ïù∏Ï¶ù ÏóÜÏù¥ ÌóàÏö©
                        .anyRequest().authenticated()
                )

                .logout(logout -> logout
                        .logoutUrl("/api/logout")
                        .addLogoutHandler((request, response, authentication) -> {
                            if (authentication == null) {
                                throw new InsufficientAuthenticationException("Î°úÍ∑∏Ïù∏Ïù¥ ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
                            }
                        })
                        .logoutSuccessHandler((request, response, authentication) -> {
                            response.setContentType("application/json");
                            response.setCharacterEncoding("UTF-8");
                            response.setStatus(HttpServletResponse.SC_OK);

                            // üî• JSESSIONID Ïø†ÌÇ§ ÏÇ≠Ï†ú
                            Cookie cookie = new Cookie("JSESSIONID", null);
                            cookie.setPath("/");
                            cookie.setMaxAge(0);
                            response.addCookie(cookie);

                            ApiResponse<?> logoutResponse = new ApiResponse<>(true, 200, "Î°úÍ∑∏ÏïÑÏõÉ ÏÑ±Í≥µ", null);
                            ObjectMapper objectMapper = new ObjectMapper();
                            response.getWriter().write(objectMapper.writeValueAsString(logoutResponse));
                        })
                        .invalidateHttpSession(true)
                )
                .build();
    }


    // Ïù∏Ï¶ù Í¥ÄÎ¶¨Ïûê ÏÑ§Ï†ï
    @Bean
    public AuthenticationManager authenticationManager(
            HttpSecurity http,
            BCryptPasswordEncoder bCryptPasswordEncoder,
            UserDetailsServiceImpl userDetailService) throws Exception{
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailService);
        authProvider.setPasswordEncoder(bCryptPasswordEncoder);
        return new ProviderManager(authProvider);
    }


    // ÎπÑÎ∞ÄÎ≤àÌò∏ Ïù∏ÏΩîÎçî Îπà Îì±Î°ù
    @Bean
    public BCryptPasswordEncoder bCryptPasswordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
